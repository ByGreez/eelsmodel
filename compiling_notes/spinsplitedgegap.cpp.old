/***************************************************************************
                         spinsplitedge.h  -  description
A spin splitted edge with white lines, can be a L2,3 or M4,5 edge
build from two hartree slater cross sections and two lorentzians
                             -------------------
    begin                : Sat Oct 26 2002
    copyright            : (C) 2002 by Jo Verbeeck
    email                : jo@localhost.localdomain
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/


#include "spinsplitedge.h"
#include "parameter.h"
#include "getfilename.h"
#include <cmath>
#include <iostream>
#include <string>
#include <fstream>
#include "curvematrix.h"
#include "imagedisplay.h"
#include "hsedge.h"
#include "lorentz.h"

SpinsplitEdge::SpinsplitEdge() //create a dummy version
:Component(),tempspectrum(){
  this->setname("Spin split edge section");
  this->setdescription("An edge consisting of two hartree slater cross sections and two lorentzian white lines, can be an L2,3 or M4,5 edge");
  //init the pointers
  continuum1=0;
  continuum2=0;
  whiteline1=0;
  whiteline2=0;
}

SpinsplitEdge::SpinsplitEdge(int n,double estart,double dispersion,std::vector<Parameter>* parameterlistptr)
:Component(n,estart,dispersion),tempspectrum(n,estart,dispersion){
  //init the pointers
  continuum1=0;
  continuum2=0;
  whiteline1=0;
  whiteline2=0;
  //add the required parameters
  Parameter p1,p2,p3,p4,p5,p6,p7,p8,p9,p10;
  if (parameterlistptr==0){
    p1=Parameter("E0",300e3,1);
    p1.interactivevalue("enter primary energy [eV]");
    p1.setchangeable(false);  //the fitter should not change this in normal operation

    p2=Parameter("Ek",estart,1);
    p2.interactivevalue("enter edge energy [eV]");

    //load the HSGOS table, store the filename in dummy parameter
    Getfilename myfile(0,"Select a HS-GOS file");
    myfile.setdirname("~");
    myfile.setfilter("GOS tables (*.*)");
    myfile.setcaption("Select a HS-GOS file");
    filename=myfile.open();
    if (filename=="") throw Componenterr::unable_to_create();//cancelled by user
    #ifdef COMPONENT_DEBUG
      std::cout <<"the filename is: "<<filename <<"\n";
    #endif
    p3=Parameter(filename,0.0,1);
    p3.setchangeable(false);  //the fitter should not change this


    p5=Parameter("thetamax",2.0e-3,1);
    p5.interactivevalue("enter collection half angle theta [rad]");
    p5.setchangeable(false); //the fitter should not change this in normal operation

    p4=Parameter("thetasteps",100.0,1);
    p4.interactivevalue("enter number of steps for theta integration");
    p4.setchangeable(false); //the fitter should not change this in normal operation

    p6=Parameter("strength",1.0e2,1);
    p6.interactivevalue("enter strength of edge");

    p7=Parameter("Esplit",1.0e1,1);
    p7.interactivevalue("enter spin splitting energy");

    p8=Parameter("Ratio",0.5,1);
    p8.interactivevalue("enter occupancy ratio between both levels");

    p9=Parameter("whiteline_strength",1.0e2,1);
    p9.interactivevalue("enter strength of first white line");

    p10=Parameter("fwhm",1.0,1);
    p10.interactivevalue("enter fwhm of white line");    
  }
  else{
    p1=(*parameterlistptr)[0];
    p2=(*parameterlistptr)[1];
    p3=(*parameterlistptr)[2];
    p4=(*parameterlistptr)[3];
    p5=(*parameterlistptr)[4];
    p6=(*parameterlistptr)[5];
    p7=(*parameterlistptr)[6];
    p8=(*parameterlistptr)[7];
    p9=(*parameterlistptr)[8];
    p10=(*parameterlistptr)[9];       
    #ifdef COMPONENT_DEBUG
    std::cout <<"creating a HS with paramterpointer "<<parameterlistptr<<" \n";
    std::cout <<"p1 "<<p1.getname()<<" \n";
    std::cout <<"p2 "<<p2.getname()<<" \n";
    std::cout <<"p3 "<<p3.getname()<<" \n";
    std::cout <<"p4 "<<p4.getname()<<" \n";
    std::cout <<"p5 "<<p5.getname()<<" \n";
    std::cout <<"p6 "<<p6.getname()<<" \n";
    std::cout <<"p7 "<<p7.getname()<<" \n";
    std::cout <<"p8 "<<p8.getname()<<" \n";
    std::cout <<"p9 "<<p9.getname()<<" \n";
    std::cout <<"p10 "<<p10.getname()<<" \n";
    #endif
    filename=p3.getname();
  }
  this->addparameter(p1);
  this->addparameter(p2);
  this->addparameter(p3);
  this->addparameter(p4);
  this->addparameter(p5);
  this->addparameter(p6);
  this->addparameter(p7);
  this->addparameter(p8);
  this->addparameter(p9);
  this->addparameter(p10);
  //create the components
  const double E1=p2.getvalue();
  const double E2=p2.getvalue()+p7.getvalue();
  const double strength1=p6.getvalue();
  const double strength2=strength1*p8.getvalue();
  const double wstrength1=p9.getvalue();
  const double wstrength2=wstrength1*p8.getvalue();
  const double fwhm=p10.getvalue();
  const double ratio=p8.getvalue();
  
  //create first continuum part  
  std::vector<Parameter> cont1par;
  cont1par.push_back(p1);
  cont1par.push_back(p2);
  cont1par.push_back(p3);
  p5.setchangeable(true); //make sure "this" can still change the value stored in p5
  p4.setchangeable(true); //make sure "this" can still change the value stored in p5
  //this does not affect the user accessible parameters of this because they are already added to the paramlist
  cont1par.push_back(p4);
  cont1par.push_back(p5);
  cont1par.push_back(p6);
  p7.setvalue(p7.getvalue()*ratio/(1.0+ratio));
  cont1par.push_back(p7);
  //set all parameters as unbound
  (cont1par[0]).setbound(false);
  (cont1par[1]).setbound(false);
  (cont1par[2]).setbound(false);
  (cont1par[3]).setbound(false);
  (cont1par[4]).setbound(false);
  (cont1par[5]).setbound(false);
  (cont1par[6]).setbound(false);
  //set all parameters as changeable
  (cont1par[0]).setchangeable(true);
  (cont1par[1]).setchangeable(true);
  (cont1par[2]).setchangeable(true);
  (cont1par[3]).setchangeable(true);
  (cont1par[4]).setchangeable(true);
  (cont1par[5]).setchangeable(true);
  (cont1par[6]).setchangeable(true);
 

  
  
  continuum1=new HSedge(n,estart,dispersion,&cont1par);
  
  #ifdef COMPONENT_DEBUG
  std::cout<<"continuum1 ptr="<<continuum1<<"\n";
  #endif
  //create second continuum part,same as continuum1 but add spin split to Ek
  std::vector<Parameter> cont2par;
  cont2par.push_back(p1);
  cont2par.push_back(p2+p7);
  cont2par.push_back(p3);
  cont2par.push_back(p4);
  cont2par.push_back(p5);
  cont2par.push_back(p6);
  p7.setvalue(p7.getvalue()*ratio);
  cont2par.push_back(p7);
  //set all parameters as unbound
  (cont2par[0]).setbound(false);
  (cont2par[1]).setbound(false);
  (cont2par[2]).setbound(false);
  (cont2par[3]).setbound(false);
  (cont2par[4]).setbound(false);
  (cont2par[5]).setbound(false);
  (cont2par[6]).setbound(false);
  //set all parameters as changeable
  (cont2par[0]).setchangeable(true);
  (cont2par[1]).setchangeable(true);
  (cont2par[2]).setchangeable(true);
  (cont2par[3]).setchangeable(true);
  (cont2par[4]).setchangeable(true);
  (cont2par[5]).setchangeable(true);
  (cont2par[6]).setchangeable(true);
  
  continuum2=new HSedge(n,estart,dispersion,&cont2par);
  
  #ifdef COMPONENT_DEBUG
  std::cout<<"continuum2 ptr="<<continuum2<<"\n";
  #endif
  //create frist white line
  whiteline1=new Lorentz(n,estart,dispersion,E1,fwhm,wstrength1);
  #ifdef COMPONENT_DEBUG
  std::cout<<"whiteline1 ptr="<<whiteline1<<"\n";
  #endif
  //create second white line
  
  
  whiteline2=new Lorentz(n,estart,dispersion,E2,fwhm,wstrength2);
  #ifdef COMPONENT_DEBUG
  std::cout<<"whiteline2 ptr="<<whiteline2<<"\n";
  #endif
  //give a name and description
  this->setname("Spin split edge section");
  this->setdescription("An edge consisting of two hartree slater cross sections and two lorentzian white lines, can be an L2,3 or M4,5 edge");  
  this->setcanconvolute(true);

  if (continuum1==0||continuum2==0||whiteline1==0||whiteline2==0) throw Componenterr::unable_to_create();
}


SpinsplitEdge::~SpinsplitEdge(){
  //clean up the components which we own
  if (continuum1!=0)    delete(continuum1);
  if (continuum2!=0)    delete(continuum2);
  if (whiteline1!=0)    delete(whiteline1);
  if (whiteline2!=0)    delete(whiteline2);
}

void SpinsplitEdge::calculate(){
  //get the parameters
  const Parameter* E0ptr= getparameter(0);
  const double E0=E0ptr->getvalue();
  const Parameter* Ekptr= getparameter(1);
  const double Ek=Ekptr->getvalue();  
  const Parameter* thetastepptr= getparameter(3);
  const double thetasteps=thetastepptr->getvalue();
  const Parameter* thetamaxptr= getparameter(4);
  const double thetamax=thetamaxptr->getvalue();
  const Parameter* strengthptr= getparameter(5);
  const double strength=strengthptr->getvalue();  
  const Parameter* Esplitptr= getparameter(6);
  const double Esplit=Esplitptr->getvalue();
  const Parameter* ratioptr= getparameter(7);
  const double ratio=ratioptr->getvalue();
  const Parameter* wstrengthptr= getparameter(8);
  const double wstrength=wstrengthptr->getvalue();
  const Parameter* fwhmptr= getparameter(9);
  const double fwhm=fwhmptr->getvalue();

  //recalculate subparts if parameters have changed
    //update the internal parameters for these models
 

    if (E0ptr->changed()) (continuum1->getparameter(0))->setvalue(E0);
    if (Ekptr->changed()) (continuum1->getparameter(1))->setvalue(Ek);
    if (thetastepptr->changed()) (continuum1->getparameter(3))->setvalue(thetasteps);
    if (thetamaxptr->changed()) (continuum1->getparameter(4))->setvalue(thetamax);
    if (strengthptr->changed()||ratioptr->changed()) (continuum1->getparameter(5))->setvalue(strength/(1.0+ratio));


    
    if (E0ptr->changed()) (continuum2->getparameter(0))->setvalue(E0);
    if (Ekptr->changed()||Esplitptr->changed()) (continuum2->getparameter(1))->setvalue(Ek+Esplit);
    if (thetastepptr->changed()) (continuum2->getparameter(3))->setvalue(thetasteps);
    if (thetamaxptr->changed()) (continuum2->getparameter(4))->setvalue(thetamax);
    if (strengthptr->changed()||ratioptr->changed()) (continuum2->getparameter(5))->setvalue(strength*ratio/(1.0+ratio));    




    continuum1->calculate();
    continuum2->calculate();

    if (Ekptr->changed()) (whiteline1->getparameter(0))->setvalue(Ek);
    if (fwhmptr->changed()) (whiteline1->getparameter(1))->setvalue(fwhm);
    if (wstrengthptr->changed()) (whiteline1->getparameter(2))->setvalue(wstrength);
    
    if (Ekptr->changed()||Esplitptr->changed()) (whiteline2->getparameter(0))->setvalue(Ek+Esplit);
    if (fwhmptr->changed()) (whiteline2->getparameter(1))->setvalue(fwhm);
    if (wstrengthptr->changed()||ratioptr->changed()) (whiteline2->getparameter(2))->setvalue(wstrength*ratio);    
    whiteline1->calculate();
    whiteline2->calculate();
    //add up the different components
    for (int i=0;i<this->getnpoints();i++){
      const double cts=continuum1->getcounts(i)+continuum2->getcounts(i)+whiteline1->getcounts(i)+whiteline2->getcounts(i);
      this->setcounts(i,cts);
    }
    this->setunchanged();
    return;
}

SpinsplitEdge* SpinsplitEdge::clone()const{
  return new SpinsplitEdge(*this);
}
SpinsplitEdge* SpinsplitEdge::new_component(int n,double estart,double dispersion,std::vector<Parameter>* parameterlistptr)const{
  return new SpinsplitEdge(n,estart,dispersion,parameterlistptr);
}
